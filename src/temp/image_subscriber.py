#!/usr/bin/env python
# TESTING
import cv2
import numpy as np
import rospy
import sys
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError


class Camera:
    """
    This class get frame from Kinect image topic to use in other modules. The
    subscribed topic in this class is generated by freenect through Kinect v1.

    * Status:
    """
    def __init__(self):
        self.test = 1
        self.color_frame = []
        self.depth_frame = []
        self.image_pub = rospy.Publisher("result_image", Image, queue_size=10)
        self.bridge = CvBridge()
        self.image_color = rospy.Subscriber("/camera/rgb/image_color", Image, self.color_callback)
        # self.image_depth = rospy.Subscriber("/camera/depth/image", Image, self.depth_callback)

    def color_callback(self, data):
        try:
            self.color_frame = self.bridge.imgmsg_to_cv2(data, "bgr8")
            # print(self.color_frame)
            # print("===========")
            self.test = cv2.imencode('.jpg', self.color_frame)[1].tostring()
            # print(self.test)
        except CvBridgeError as e:
            print(e)

        # cv2.imshow("Color_Frame", self.color_frame)
        # cv2.waitKey(3)

        # try:
        #     self.image_pub.publish(self.bridge.cv2_to_imgmsg(self.color_frame, "bgr8"))
        # except CvBridgeError as e:
        #     print(e)

    # def depth_callback(self, data):
    #     try:
    #         self.depth_frame = self.bridge.imgmsg_to_cv2(data, "bgr8")
    #     except CvBridgeError as e:
    #         print(e)
    #
    #     cv2.imshow("Depth_Frame", self.depth_frame)
    #     cv2.waitKey(3)


def main():
    rospy.init_node("Kinect_python", anonymous=True)
    kinect = Camera()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting Down")
    cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
